import { motion } from 'framer-motion';
import { BarChart3, FileDown, Calendar, TrendingUp, Users, Clock, Copy, X, RefreshCw, AlertTriangle } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/contexts/SupabaseAuthContext';
import { useSupabaseData } from '@/contexts/SupabaseDataContext';
import { supabase } from '@/integrations/supabase/client';
import { TaskRestriction } from '@/types';
import { useState, useEffect, useMemo } from 'react';

const Relatorios = () => {
  const { user, profile } = useAuth();
  const { projects, tasks, getTasksByUser, profiles } = useSupabaseData();
  const [showReport, setShowReport] = useState(false);
  const [generatedReport, setGeneratedReport] = useState('');
  const [showTimeline, setShowTimeline] = useState(false);
  const [showPerformance, setShowPerformance] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState<string>('own_data');
  const [reportType, setReportType] = useState<string>('completo');
  const [taskRestrictions, setTaskRestrictions] = useState<TaskRestriction[]>([]);
  const [refreshing, setRefreshing] = useState(false);

  // Helper function to get blocking reason
  const getBlockingReason = (restrictions: TaskRestriction[]) => {
    if (!restrictions || restrictions.length === 0) return '';
    return restrictions.map(r => r.blocking_task_title || 'Unknown Task').join(', ');
  };

  // Estado para controlar qual usu√°rio est√° sendo visualizado
  const currentUserId = (selectedUserId === 'own_data' || !selectedUserId) ? user?.id || '' : selectedUserId;
  const currentUser = profiles.find(p => p.id === currentUserId) || user;

  const isAdmin = profile?.role === 'admin';


  // Carregamento das restri√ß√µes de tarefas
  useEffect(() => {
    if (currentUserId) {
      loadTaskRestrictions();
    }
  }, [currentUserId, tasks]);

  const loadTaskRestrictions = async () => {
    try {
      const { data, error } = await supabase
        .from('task_restrictions_detailed')
        .select('*')
        .eq('status', 'active');

      if (error) throw error;

      const formattedRestrictions: TaskRestriction[] = data?.map(item => ({
        id: item.id,
        waiting_task_id: item.waiting_task_id,
        blocking_task_id: item.blocking_task_id,
        blocking_user_id: item.blocking_user_id,
        status: item.status as 'active' | 'resolved' | 'cancelled',
        created_at: item.created_at,
        updated_at: item.updated_at || item.created_at,
        resolved_at: item.resolved_at
      })) || [];

      setTaskRestrictions(formattedRestrictions);
    } catch (error) {
      console.error('Erro ao carregar restri√ß√µes:', error);
    }
  };

  if (!user) return null;

  // Fun√ß√£o para obter projetos do usu√°rio com dados completos e sincronizados
  const getProjectsByUser = (userId: string) => {
    return projects.filter(project =>
      project.responsible_ids && project.responsible_ids.includes(userId)
    );
  };

  // Fun√ß√£o para obter tarefas com restri√ß√µes integradas
  const getTasksWithRestrictions = (userId: string) => {
    const userTasks = getTasksByUser(userId);

    return userTasks.map(task => {
      // Buscar restri√ß√µes ativas para esta tarefa
      const activeRestrictions = taskRestrictions.filter(restriction =>
        restriction.waiting_task_id === task.id && restriction.status === 'active'
      );

      // Buscar restri√ß√µes onde esta tarefa est√° bloqueando outras
      const blockingRestrictions = taskRestrictions.filter(restriction =>
        restriction.blocking_task_id === task.id && restriction.status === 'active'
      );

      return {
        ...task,
        active_restrictions: activeRestrictions,
        blocking_restrictions: blockingRestrictions,
        can_start: activeRestrictions.length === 0
      };
    });
  };

  // Estat√≠sticas integradas e sincronizadas
  const userProjects = getProjectsByUser(currentUserId);
  const userTasksWithRestrictions = getTasksWithRestrictions(currentUserId);

  const totalProjects = userProjects.length;
  const activeProjects = userProjects.filter(p => p.status === 'EM_ANDAMENTO').length;
  const completedProjects = userProjects.filter(p => p.status === 'CONCLUIDO' || p.status === 'FINALIZADO').length;
  const totalTasks = userTasksWithRestrictions.length;
  const completedTasks = userTasksWithRestrictions.filter(t => t.status === 'CONCLUIDA').length;
  const activeTasks = userTasksWithRestrictions.filter(t => t.status === 'EM_ANDAMENTO').length;
  const blockedTasks = userTasksWithRestrictions.filter(t => !t.can_start && t.status !== 'CONCLUIDA').length;

  // Fun√ß√£o para obter o nome dos respons√°veis por ID
  const getResponsibleNames = (responsibleIds: string[]) => {
    if (!responsibleIds || responsibleIds.length === 0) return 'N√£o atribu√≠do';

    return responsibleIds.map(id => {
      const profile = profiles.find(p => p.id === id);
      return profile?.full_name || profile?.email || 'Usu√°rio n√£o encontrado';
    }).join(', ');
  };

  // Fun√ß√£o para formatar data
  const formatDate = (dateString: string | null) => {
    if (!dateString) return '-';
    return new Date(dateString).toLocaleDateString('pt-BR');
  };

  // Fun√ß√£o para obter data atual do sistema
  const getCurrentDate = () => {
    return new Date().toLocaleDateString('pt-BR');
  };

  // Fun√ß√£o para obter detalhes das restri√ß√µes de uma tarefa
  const getTaskRestrictionsDetails = (task: any) => {
    if (!task.active_restrictions || task.active_restrictions.length === 0) {
      return 'Nenhuma restri√ß√£o ativa';
    }

    return task.active_restrictions.map((restriction: TaskRestriction) => {
      const blockingTask = tasks.find(t => t.id === restriction.blocking_task_id);
      const blockingUser = profiles.find(p => p.id === restriction.blocking_user_id);

      return `Aguardando: "${blockingTask?.title || 'Tarefa n√£o encontrada'}" (respons√°vel: ${blockingUser?.full_name || blockingUser?.email || 'Usu√°rio n√£o encontrado'})`;
    }).join('; ');
  };

  // Fun√ß√£o para gerar o relat√≥rio padronizado e sincronizado
  const generateTaskReport = () => {
    const reportUserId = currentUserId;
    const reportUser = currentUser;

    const tasksWithRestrictions = getTasksWithRestrictions(reportUserId);
    const userProjects = getProjectsByUser(reportUserId);
    const activeUserProjects = userProjects.filter(p => p.status === 'EM_ANDAMENTO');

    // Filtrar tarefas baseado no tipo de relat√≥rio selecionado
    let filteredTasks = tasksWithRestrictions;
    switch (reportType) {
      case 'concluidas':
        filteredTasks = tasksWithRestrictions.filter(t => t.status === 'CONCLUIDA');
        break;
      case 'pendentes':
        filteredTasks = tasksWithRestrictions.filter(t => t.status !== 'CONCLUIDA');
        break;
      case 'bloqueadas':
        filteredTasks = tasksWithRestrictions.filter(t => !t.can_start && t.status !== 'CONCLUIDA');
        break;
      case 'completo':
      default:
        filteredTasks = tasksWithRestrictions;
        break;
    }

    const completedUserTasks = filteredTasks.filter(t => t.status === 'CONCLUIDA');
    const pendingUserTasks = filteredTasks.filter(t => t.status !== 'CONCLUIDA');
    const blockedUserTasks = filteredTasks.filter(t => !t.can_start && t.status !== 'CONCLUIDA');

    // Verificar tarefas pr√≥ximas do prazo (pr√≥ximos 7 dias)
    const today = new Date();
    const nextWeek = new Date();
    nextWeek.setDate(today.getDate() + 7);

    const upcomingTasks = pendingUserTasks.filter(task => {
      if (!task.due_date) return false;
      const dueDate = new Date(task.due_date);
      return dueDate >= today && dueDate <= nextWeek;
    });

    const reportTypeLabel = {
      'completo': 'COMPLETO',
      'concluidas': 'TAREFAS CONCLU√çDAS',
      'pendentes': 'TAREFAS PENDENTES',
      'bloqueadas': 'TAREFAS BLOQUEADAS'
    }[reportType] || 'COMPLETO';

    let report = `üìä RELAT√ìRIO DE TAREFAS ${reportTypeLabel} - ${(reportUser?.full_name || reportUser?.email || 'USU√ÅRIO').toUpperCase()}
üìÖ Data: ${getCurrentDate()}
üîÑ Sincronizado com: Tasks, Projects e Task_Restrictions
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìÇ PROJETOS ATIVOS (${activeUserProjects.length}):

`;

    // Lista de projetos ativos
    activeUserProjects.forEach((project, index) => {
      const projectNumber = index + 1;
      const emoji = projectNumber <= 5 ? `${projectNumber}Ô∏è‚É£` : `${projectNumber}Ô∏è‚É£`;

      // Formatar valores financeiros
      const formatCurrency = (value: number) => {
        return new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(value);
      };

      // Contar tarefas deste projeto
      const projectTasks = filteredTasks.filter(t => t.project_id === project.id);
      const projectCompletedTasks = projectTasks.filter(t => t.status === 'CONCLUIDA').length;
      const projectPendingTasks = projectTasks.filter(t => t.status !== 'CONCLUIDA').length;

      report += `${emoji} ${project.name}
- Cliente: ${project.client}
- Status: ${project.status}
- Tipo: ${project.type === 'publico' ? 'P√∫blico' : 'Privado'}
- Respons√°veis: ${getResponsibleNames(project.responsible_ids)}
- Tarefas: ${projectCompletedTasks} conclu√≠das | ${projectPendingTasks} pendentes
- In√≠cio: ${formatDate(project.contract_start)} | Fim: ${formatDate(project.contract_end)}${project.project_value ? `
- Valor: ${formatCurrency(project.project_value)}` : ''}${project.amount_paid ? `
- Pago: ${formatCurrency(project.amount_paid)}` : ''}

`;
    });

    report += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã ${reportTypeLabel} (${filteredTasks.length}):
${blockedUserTasks.length > 0 ? `üö´ ${blockedUserTasks.length} tarefas bloqueadas por restri√ß√µes\n` : ''}
`;

    // Lista de tarefas filtradas com informa√ß√µes de restri√ß√µes
    filteredTasks.forEach((task, index) => {
      const project = projects.find(p => p.id === task.project_id);
      const isUpcoming = upcomingTasks.some(t => t.id === task.id);
      const statusEmoji = task.status === 'CONCLUIDA' ? '‚úÖ' :
                         task.status === 'EM_ANDAMENTO' ? 'üîÑ' :
                         !task.can_start ? 'üö´' : '‚è≥';

      // Obter co-respons√°veis (excluindo o usu√°rio atual)
      let coResponsible = '';
      if (Array.isArray(task.assigned_to)) {
        const otherResponsibles = task.assigned_to.filter((id: string) => id !== reportUserId);
        if (otherResponsibles.length > 0) {
          coResponsible = `üë• Co-respons√°vel: ${getResponsibleNames(otherResponsibles)}`;
        }
      }

      // Informa√ß√µes de restri√ß√µes detalhadas
      const restrictionsInfo = getTaskRestrictionsDetails(task);
      const hasRestrictions = task.active_restrictions && task.active_restrictions.length > 0;

      report += `${statusEmoji} TAREFA ${index + 1}${!task.can_start ? ' [BLOQUEADA]' : ''}
üìå T√≠tulo: ${task.title}
üèóÔ∏è Projeto: ${project?.name || 'Projeto n√£o encontrado'}${coResponsible ? '\n' + coResponsible : ''}
üìä Fase: ${task.phase || '-'}
üîÑ Status: ${task.status}${task.status === 'CONCLUIDA' ? ' ‚úÖ' : ''}
${hasRestrictions ? `üö´ Restri√ß√µes: ${restrictionsInfo}` : '‚úÖ Sem restri√ß√µes - pode iniciar'}
üèÜ Pontos: ${task.points || 0} pontos
‚ö° Prioridade: ${task.priority === 'alta' ? 'Alta üî¥' : task.priority === 'media' ? 'M√©dia üü°' : 'Baixa üü¢'}
üìÖ In√≠cio: ${formatDate(task.activity_start)}
‚è∞ Prazo: ${formatDate(task.due_date)}${isUpcoming ? ' ‚ö†Ô∏è PR√ìXIMO' : ''}
üìù Entrega: ${formatDate(task.completed_at)}${task.status === 'CONCLUIDA' ? ' ‚úÖ' : ''}
üí¨ Observa√ß√µes: ${task.comment || '-'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;
    });

    // Resumo final com estat√≠sticas completas
    const totalPoints = filteredTasks.reduce((sum, task) => sum + (task.points || 0), 0);
    const completedPoints = completedUserTasks.reduce((sum, task) => sum + (task.points || 0), 0);
    const pendingPoints = pendingUserTasks.reduce((sum, task) => sum + (task.points || 0), 0);
    const blockedPoints = blockedUserTasks.reduce((sum, task) => sum + (task.points || 0), 0);

    report += `
üìä RESUMO EXECUTIVO:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìà ESTAT√çSTICAS GERAIS:
- Total de Projetos: ${totalProjects}
- Projetos Ativos: ${activeProjects}
- Projetos Conclu√≠dos: ${completedProjects}

üìã AN√ÅLISE DE TAREFAS (${reportTypeLabel}):
- Total: ${filteredTasks.length}
- Conclu√≠das: ${completedUserTasks.length} ‚úÖ
- Pendentes: ${pendingUserTasks.length} ‚è≥
- Bloqueadas: ${blockedUserTasks.length} üö´
- Podem iniciar: ${filteredTasks.filter(t => t.can_start && t.status !== 'CONCLUIDA').length} üü¢${upcomingTasks.length > 0 ? `
- Pr√≥ximas (7 dias): ${upcomingTasks.length} ‚ö†Ô∏è` : ''}

üèÜ PONTUA√á√ÉO:
- Total Dispon√≠vel: ${totalPoints} pontos
- Conquistada: ${completedPoints} pontos ‚úÖ
- Pendente: ${pendingPoints} pontos ‚è≥
- Bloqueada: ${blockedPoints} pontos üö´
- Taxa de Conquista: ${totalPoints > 0 ? Math.round((completedPoints / totalPoints) * 100) : 0}%

üö´ AN√ÅLISE DE RESTRI√á√ïES:
- Tarefas com restri√ß√µes ativas: ${filteredTasks.filter(t => !t.can_start).length}
- Tarefas liberadas: ${filteredTasks.filter(t => t.can_start).length}
- Efici√™ncia (sem bloqueios): ${filteredTasks.length > 0 ? Math.round((filteredTasks.filter(t => t.can_start).length / filteredTasks.length) * 100) : 100}%

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÖ Relat√≥rio sincronizado com todas as tabelas do sistema
üîÑ Tasks | Projects | Task_Restrictions | Profiles
‚è∞ Gerado em: ${new Date().toLocaleString('pt-BR')}`;

    return report;
  };

  // Fun√ß√£o para copiar relat√≥rio
  const copyReport = async () => {
    try {
      await navigator.clipboard.writeText(generatedReport);
      alert('Relat√≥rio copiado para a √°rea de transfer√™ncia!');
    } catch (err) {
      console.error('Erro ao copiar:', err);
      alert('Erro ao copiar o relat√≥rio');
    }
  };

  // Fun√ß√£o para gerar e mostrar relat√≥rio
  const handleGenerateReport = () => {
    const report = generateTaskReport();
    setGeneratedReport(report);
    setShowReport(true);
  };

  // Fun√ß√£o para atualizar dados
  const handleRefresh = async () => {
    setRefreshing(true);
    try {
      await loadTaskRestrictions();
      // Os outros dados s√£o atualizados automaticamente pelo contexto
    } finally {
      setRefreshing(false);
    }
  };

  // Fun√ß√£o para gerar cronograma de tarefas em ordem cronol√≥gica
  const generateProjectTimeline = () => {
    const tasksWithRestrictions = getTasksWithRestrictions(currentUserId);

    // Filtrar apenas tarefas pendentes e com prazo definido, depois ordenar por data
    const pendingTasksWithDueDate = tasksWithRestrictions
      .filter(task => task.due_date && task.status !== 'CONCLUIDA')
      .sort((a, b) => new Date(a.due_date).getTime() - new Date(b.due_date).getTime());

    const today = new Date();

    // Separar tarefas por urg√™ncia
    const overdueTasks = pendingTasksWithDueDate.filter(task => {
      const dueDate = new Date(task.due_date);
      return dueDate < today;
    });

    const urgentTasks = pendingTasksWithDueDate.filter(task => {
      const dueDate = new Date(task.due_date);
      const diffDays = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
      return diffDays <= 7 && diffDays >= 0;
    });

    const normalTasks = pendingTasksWithDueDate.filter(task => {
      const dueDate = new Date(task.due_date);
      const diffDays = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
      return diffDays > 7;
    });

    let timeline = `üìÖ CRONOGRAMA DE TAREFAS - ${(currentUser?.full_name || currentUser?.email || 'USU√ÅRIO').toUpperCase()}
üìÖ Gerado em: ${getCurrentDate()}
üîÑ Total: ${pendingTasksWithDueDate.length} tarefas pendentes com prazo
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

`;

    // TAREFAS VENCIDAS
    if (overdueTasks.length > 0) {
      timeline += `üö® TAREFAS VENCIDAS (${overdueTasks.length}):

`;
      overdueTasks.forEach((task, index) => {
        const project = projects.find(p => p.id === task.project_id);
        const dueDate = new Date(task.due_date);
        const daysOverdue = Math.ceil((today.getTime() - dueDate.getTime()) / (1000 * 60 * 60 * 24));

        timeline += `${index + 1}. ‚ùå "${task.title}"
   üìÅ ${project?.title || 'Projeto N/A'}
   üìÖ Venceu h√° ${daysOverdue} dia(s) - ${dueDate.toLocaleDateString('pt-BR')}
   ${task.active_restrictions?.length > 0 ? 'üö´ BLOQUEADA: ' + getBlockingReason(task.active_restrictions) : '‚úÖ Pode iniciar agora'}

`;
      });
    }

    // TAREFAS URGENTES (pr√≥ximos 7 dias)
    if (urgentTasks.length > 0) {
      timeline += `‚ö° TAREFAS URGENTES - Pr√≥ximos 7 dias (${urgentTasks.length}):

`;
      urgentTasks.forEach((task, index) => {
        const project = projects.find(p => p.id === task.project_id);
        const dueDate = new Date(task.due_date);
        const daysUntilDue = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));

        timeline += `${index + 1}. ‚ö° "${task.title}"
   üìÅ ${project?.title || 'Projeto N/A'}
   üìÖ ${daysUntilDue === 0 ? 'üî• VENCE HOJE!' : `Prazo: ${daysUntilDue} dia(s)`} - ${dueDate.toLocaleDateString('pt-BR')}
   ${task.active_restrictions?.length > 0 ? 'üö´ BLOQUEADA: ' + getBlockingReason(task.active_restrictions) : '‚úÖ Pode iniciar agora'}

`;
      });
    }

    // PR√ìXIMAS TAREFAS (mais de 7 dias)
    if (normalTasks.length > 0) {
      timeline += `üìã PR√ìXIMAS TAREFAS - Cronograma Completo (${normalTasks.length}):

`;
      normalTasks.slice(0, 15).forEach((task, index) => {  // Limitar a 15 tarefas para n√£o ficar muito longo
        const project = projects.find(p => p.id === task.project_id);
        const dueDate = new Date(task.due_date);
        const daysUntilDue = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));

        timeline += `${index + 1}. üìÖ "${task.title}"
   üìÅ ${project?.title || 'Projeto N/A'}
   üìÖ Em ${daysUntilDue} dias - ${dueDate.toLocaleDateString('pt-BR')}
   ${task.active_restrictions?.length > 0 ? 'üö´ BLOQUEADA: ' + getBlockingReason(task.active_restrictions) : '‚úÖ Pode iniciar agora'}

`;
      });

      if (normalTasks.length > 15) {
        timeline += `... e mais ${normalTasks.length - 15} tarefas futuras.

`;
      }
    }

    timeline += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìä RESUMO:
‚Ä¢ Vencidas: ${overdueTasks.length}
‚Ä¢ Urgentes (‚â§7 dias): ${urgentTasks.length}
‚Ä¢ Futuras: ${normalTasks.length}
‚Ä¢ Bloqueadas: ${pendingTasksWithDueDate.filter(t => t.active_restrictions?.length > 0).length}

üéØ FOCO: ${overdueTasks.length > 0 ? 'Resolver tarefas vencidas primeiro!' : urgentTasks.length > 0 ? 'Priorizar tarefas urgentes!' : 'Bom trabalho, sem tarefas cr√≠ticas!'}`;

    return timeline;
  };

  // Fun√ß√£o para gerar relat√≥rio de desempenho (atualizada)
  const generatePerformanceReport = () => {
    const tasksWithRestrictions = getTasksWithRestrictions(currentUserId);
    const completedTasks = tasksWithRestrictions.filter(t => t.status === 'CONCLUIDA');
    const pendingTasks = tasksWithRestrictions.filter(t => t.status !== 'CONCLUIDA');

    // Calcular estat√≠sticas b√°sicas
    const totalDeliveries = completedTasks.length;

    let anticipatedCount = 0;
    let onTimeCount = 0;
    let delayedCount = 0;
    let totalPoints = 0;

    completedTasks.forEach(task => {
      if (!task.due_date || !task.completed_at) return;

      const daysDiff = Math.floor((new Date(task.due_date).getTime() - new Date(task.completed_at).getTime()) / (1000 * 60 * 60 * 24));

      if (daysDiff > 0) {
        anticipatedCount++;
        totalPoints += daysDiff * 2;
      } else if (daysDiff < 0) {
        delayedCount++;
        totalPoints += daysDiff * 4; // negativo
      } else {
        onTimeCount++;
      }
    });

    // Analisar tarefas pendentes por urg√™ncia
    const today = new Date();
    const overduePending = pendingTasks.filter(t => t.due_date && new Date(t.due_date) < today).length;
    const urgentPending = pendingTasks.filter(t => {
      if (!t.due_date) return false;
      const days = Math.ceil((new Date(t.due_date).getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
      return days <= 7 && days >= 0;
    }).length;

    // Determinar classifica√ß√£o simples
    let classification = '';
    let classificationColor = '';
    if (totalPoints >= 20) {
      classification = 'Excelente';
      classificationColor = 'üèÜ';
    } else if (totalPoints >= 0) {
      classification = 'Bom';
      classificationColor = 'üëç';
    } else if (totalPoints >= -20) {
      classification = 'Regular';
      classificationColor = '‚ö†Ô∏è';
    } else {
      classification = 'Precisa Melhorar';
      classificationColor = 'üìä';
    }

    const performance = `üìä AN√ÅLISE DE DESEMPENHO - ${(currentUser?.full_name || currentUser?.email || 'USU√ÅRIO').toUpperCase()}
üìÖ Per√≠odo: ${getCurrentDate()}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ RESUMO GERAL:
‚Ä¢ Total de tarefas conclu√≠das: ${totalDeliveries}
‚Ä¢ Pontua√ß√£o atual: ${totalPoints} pontos
‚Ä¢ Classifica√ß√£o: ${classificationColor} ${classification}

üìà HIST√ìRICO DE ENTREGAS:
‚Ä¢ ‚úÖ Antecipadas: ${anticipatedCount} (${totalDeliveries > 0 ? Math.round((anticipatedCount / totalDeliveries) * 100) : 0}%)
‚Ä¢ üéØ No prazo: ${onTimeCount} (${totalDeliveries > 0 ? Math.round((onTimeCount / totalDeliveries) * 100) : 0}%)
‚Ä¢ ‚è∞ Atrasadas: ${delayedCount} (${totalDeliveries > 0 ? Math.round((delayedCount / totalDeliveries) * 100) : 0}%)

‚ö° SITUA√á√ÉO ATUAL:
‚Ä¢ üö® Tarefas vencidas: ${overduePending}
‚Ä¢ ‚ö†Ô∏è Tarefas urgentes (‚â§7 dias): ${urgentPending}
‚Ä¢ üìã Total pendentes: ${pendingTasks.length}

${totalDeliveries === 0 ? `
üîî PRIMEIRA AN√ÅLISE:
Ainda n√£o h√° tarefas conclu√≠das para an√°lise.
Complete algumas tarefas para ver seu desempenho!` : ''}

${totalPoints < 0 ? `
üí° DICAS PARA MELHORAR:
‚Ä¢ Priorize tarefas com prazo mais pr√≥ximo
‚Ä¢ Monitore bloqueios e restri√ß√µes
‚Ä¢ Comunique atrasos com anteced√™ncia
‚Ä¢ Use o cronograma para se organizar` : ''}

${totalPoints >= 20 ? `
üéâ PARAB√âNS!
Voc√™ est√° mantendo um excelente desempenho!
Continue priorizando entregas antecipadas.` : ''}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Sistema: +2 pontos/dia antecipado | -4 pontos/dia atrasado`;

    return performance;
  };

  // Fun√ß√µes para mostrar relat√≥rios
  const handleShowTimeline = () => {
    const timeline = generateProjectTimeline();
    setGeneratedReport(timeline);
    setShowTimeline(true);
  };

  const handleShowPerformance = () => {
    const performance = generatePerformanceReport();
    setGeneratedReport(performance);
    setShowPerformance(true);
  };

  return (
    <div className="space-y-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-foreground">Relat√≥rios Integrados</h1>
            <p className="text-muted-foreground">
              Sistema completo sincronizado com Tarefas ‚Ä¢ Restri√ß√µes ‚Ä¢ Projetos
            </p>
          </div>

          <div className="flex items-center gap-3">
            <Button
              variant="outline"
              size="sm"
              onClick={handleRefresh}
              disabled={refreshing}
              className="flex items-center gap-2"
            >
              <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
              {refreshing ? 'Sincronizando...' : 'Atualizar'}
            </Button>

            {/* Filtro para Administradores */}
            {isAdmin && (
              <div className="flex items-center space-x-2">
                <Label htmlFor="user-select">Usu√°rio:</Label>
                <Select value={selectedUserId} onValueChange={setSelectedUserId}>
                  <SelectTrigger className="w-[200px]" id="user-select">
                    <SelectValue placeholder="Seus pr√≥prios dados" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="own_data">Seus dados</SelectItem>
                    {profiles.map((profile) => (
                      <SelectItem key={profile.id} value={profile.id}>
                        {profile.full_name || profile.email}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>
        </div>
      </motion.div>

      {/* Estat√≠sticas Resumo com Restri√ß√µes */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Projetos</CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalProjects}</div>
            <p className="text-xs text-muted-foreground">
              {activeProjects} ativos ‚Ä¢ {completedProjects} conclu√≠dos
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Tarefas</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalTasks}</div>
            <p className="text-xs text-muted-foreground">
              {activeTasks} ativas ‚Ä¢ {completedTasks} conclu√≠das
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Bloqueadas</CardTitle>
            <AlertTriangle className="h-4 w-4 text-orange-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">{blockedTasks}</div>
            <p className="text-xs text-muted-foreground">
              Por restri√ß√µes ativas
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Efici√™ncia</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {totalTasks > 0 ? Math.round(((totalTasks - blockedTasks) / totalTasks) * 100) : 100}%
            </div>
            <p className="text-xs text-muted-foreground">
              Sem bloqueios
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Geradores de Relat√≥rio */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Users className="h-5 w-5 mr-2 text-primary" />
              Desempenho Completo
            </CardTitle>
            <CardDescription>An√°lise detalhada com restri√ß√µes</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label>An√°lise</Label>
              <p className="text-sm text-muted-foreground">
                Hist√≥rico completo sincronizado com todas as tabelas
              </p>
            </div>
            <Button className="w-full" onClick={handleShowPerformance}>
              <BarChart3 className="h-4 w-4 mr-2" />
              Gerar Desempenho
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Calendar className="h-5 w-5 mr-2 text-success" />
              Cronograma Integrado
            </CardTitle>
            <CardDescription>Timeline com status de restri√ß√µes</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label>Timeline</Label>
              <p className="text-sm text-muted-foreground">
                Prazos organizados com an√°lise de bloqueios
              </p>
            </div>
            <Button className="w-full" onClick={handleShowTimeline}>
              <Calendar className="h-4 w-4 mr-2" />
              Gerar Cronograma
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <FileDown className="h-5 w-5 mr-2 text-accent" />
              Relat√≥rio Sincronizado
            </CardTitle>
            <CardDescription>Dados completos das 3 tabelas</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label>Tipo de Relat√≥rio</Label>
              <Select value={reportType} onValueChange={setReportType}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione o tipo" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="completo">Relat√≥rio Completo</SelectItem>
                  <SelectItem value="concluidas">Apenas Conclu√≠das</SelectItem>
                  <SelectItem value="pendentes">Apenas Pendentes</SelectItem>
                  <SelectItem value="bloqueadas">Apenas Bloqueadas</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <Button className="w-full" onClick={handleGenerateReport}>
              <FileDown className="h-4 w-4 mr-2" />
              Gerar Relat√≥rio
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Modal do Relat√≥rio */}
      {(showReport || showTimeline || showPerformance) && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white rounded-lg w-full max-w-4xl max-h-[90vh] overflow-hidden flex flex-col"
          >
            <div className="flex items-center justify-between p-6 border-b">
              <h3 className="text-lg font-semibold">
                {showReport && `Relat√≥rio de Tarefas ${reportType !== 'completo' ? `- ${reportType.toUpperCase()}` : ''}`}
                {showTimeline && 'Cronograma Integrado'}
                {showPerformance && 'Desempenho Completo'}
              </h3>
              <div className="flex gap-2">
                <Badge variant="secondary" className="text-xs">
                  Sincronizado
                </Badge>
                <Button variant="outline" size="sm" onClick={copyReport}>
                  <Copy className="h-4 w-4 mr-2" />
                  Copiar
                </Button>
                <Button variant="ghost" size="sm" onClick={() => {
                  setShowReport(false);
                  setShowTimeline(false);
                  setShowPerformance(false);
                }}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            <div className="flex-1 overflow-y-auto p-6">
              <pre className="whitespace-pre-wrap font-mono text-sm bg-gray-50 p-4 rounded-lg border">
                {generatedReport}
              </pre>
            </div>

            <div className="p-6 border-t bg-gray-50">
              <div className="flex justify-between items-center">
                <p className="text-sm text-muted-foreground">
                  üìä Relat√≥rio gerado em {new Date().toLocaleString('pt-BR')} | üîÑ Dados sincronizados
                </p>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={copyReport}>
                    <Copy className="h-4 w-4 mr-2" />
                    Copiar Texto
                  </Button>
                  <Button onClick={() => {
                    setShowReport(false);
                    setShowTimeline(false);
                    setShowPerformance(false);
                  }}>
                    Fechar
                  </Button>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  );
};

export default Relatorios;